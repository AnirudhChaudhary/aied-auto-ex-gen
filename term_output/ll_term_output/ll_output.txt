
Create an implementation for common_elements, which accepts two linked lists named x and y containing numbers that are sorted in decreasing order without repeated elements within each list. The function should return the list of numbers that appear in both x and y.\n\n```python\ndef common_elements(x, y):\n    \'\'\'For decreasing x and y, return a list of numbers appearing in both.\n\n    >>> u = Link(10, Link(7, Link(5, Link(3, Link(1)))))\n    >>> v = Link(9, Link(7, Link(5, Link(2))))\n    >>> common_elements(u, v)  # 7 and 5\n    Link(7, Link(5))\n    >>> common_elements(u.rest.rest, v.rest)  # 5 only\n    Link(5)\n    >>> common_elements(Link(10, u), Link(10, v))\n    Link(10, Link(7, Link(5)))\n    \'\'\'\n    "*** YOUR CODE HERE ***"\n```'
Implement common_elements, which takes two linked lists of integers called x and y that are sorted in decreasing order and have no duplicated elements within each list. It returns the sum of the numbers that appear in both lists.\n\n```python\ndef common_elements(x, y):\n    \'\'\'For decreasing x and y, sum the numbers that appear in both.\n\n    >>> c = Link(10, Link(7, Link(6, Link(4, Link(3)))))\n    >>> d = Link(8, Link(7, Link(5, Link(3, Link(1)))))\n    >>> common_elements(c, d)  # 7 and 3\n    10\n    >>> common_elements(c.rest, d)  # just 7\n    7\n    >>> common_elements(Link(10, c), Link(12, d))\n    10\n    \'\'\'\n    "*** YOUR CODE HERE ***"\n```\n\n'
Write a function `common_elements`, which takes two lists of integers named `x` and `y` that are both sorted in non-decreasing order and do not contain duplicate numbers. The function should return the number of elements that occur in both lists.\n\n```python\ndef common_elements(x, y):\n    \'\'\'For non-decreasing x and y, determine how many elements exist in both.\n\n    >>> list1 = [2, 4, 6, 8, 10, 12]\n    >>> list2 = [1, 2, 3, 4, 5]\n    >>> common_elements(list1, list2)  # 2 and 4\n    2\n    >>> common_elements(list1[2:], list2)  # no common elements\n    0\n    >>> common_elements([0] + list1, [0] + list2)\n    3\n    \'\'\'\n    "*** YOUR CODE HERE ***"\n```'
Implement common_elements, which takes two arrays of strings, `x` and `y`, sorted in lexicographical order and with no duplicate strings within each array. It returns a list of strings that appear in both arrays without changing the order or altering the original arrays.\n\n```python\ndef common_elements(x, y):\n    \'\'\'For lexicographically sorted x and y, find the strings that appear in both.\n\n    >>> x = [\'apple\', \'banana\', \'cherry\', \'date\']\n    >>> y = [\'banana\', \'elephant\', \'fig\', \'cherry\']\n    >>> common_elements(x, y)  # \'banana\' and \'cherry\'\n    [\'banana\', \'cherry\']\n    >>> common_elements([\'avocado\', \'grape\'], [\'grape\', \'kiwi\', \'lemon\'])\n    [\'grape\']\n    >>> common_elements([\'mango\', \'nectarine\'], [\'peach\', \'plum\'])\n    []\n    \'\'\'\n    "*** YOUR CODE HERE ***"\n```'
Implement shared_elements, which takes two linked lists of strings called list1 and list2 that are sorted in lexicographic order and have no repeated elements within each list. It returns the count of how many strings appear in both lists.\n\n```python\ndef shared_elements(list1, list2):\n    \'\'\'For lexicographically sorted list1 and list2, count the strings that appear in both.\n\n    >>> list_a = Link(\'alpha\', Link(\'beta\', Link(\'delta\', Link(\'epsilon\', Link(\'gamma\')))))\n    >>> list_b = Link(\'alpha\', Link(\'beta\', Link(\'zeta\', Link(\'eta\', Link(\'theta\')))))\n    >>> shared_elements(list_a, list_b)  # \'alpha\' and \'beta\'\n    2\n    >>> shared_elements(list_a.rest, list_b.rest)  # no common strings\n    0\n    >>> shared_elements(Link(\'aardvark\', list_a), Link(\'aardvark\', list_b))\n    3\n    \'\'\'\n    "*** YOUR CODE HERE ***"\n```'
Implement overlap, which takes two linked lists of numbers called s and t that are sorted in increasing order and have no repeated elements within each list. It returns the count of how many numbers appear in both lists. def overlap(s, t): '''For increasing s and t, count the numbers that appear in both. >>> a = Link(3, Link(4, Link(6, Link(7, Link(9, Link(10)))))) >>> b = Link(1, Link(3, Link(5, Link(7, Link(8))))) >>> overlap(a, b)  # 3 and 7 2 >>> overlap(a.rest, b)  # just 7 1 >>> overlap(Link(0, a), Link(0, b)) 3 ''' "*** YOUR CODE HERE ***"